# $Id$

PortSystem 1.0
PortGroup select 1.0

name                openjdk7

set jport_minor_version 45
set jport_build_number  18
set jdk_major_version   7
set jdk_minor_version   40
set jdk_build_number    43
set jdk_build_date      26_aug_2013
version             ${jdk_major_version}.${jport_minor_version}.${jport_build_number}
revision            1

categories          java
maintainers         landonf openmaintainer
platforms           darwin

homepage            http://openjdk.java.net/
description         An open-source implementation of the Java Platform, Standard Edition.
long_description \
                    OpenJDK is an open-source implementation of the Java Platform, Standard Edition. \
                    \
                    Much of the OpenJDK code is licensed under the GPL version 2 with the \
                    Classpath exception. The Java Hotspot virtual machine source code is \
                    licensed under the GPL version 2 only.

# Licensed GPLv2-CPE. See also:
# - http://openjdk.java.net/legal/gplv2+ce.html
# - http://en.wikipedia.org/wiki/GPL_linking_exception#The_classpath_exception
license             Permissive 


select.group        java
select.file         ${filespath}/${name}

notes \
"To make $name the default, please run
\tsudo port select --set ${select.group} $name"

# Use our own version of ant to avoid circular dependencies
set ant_version     1.8.4
set ant_distfile    apache-ant-${ant_version}-bin

use_zip             yes
distname            openjdk-${jdk_major_version}u${jdk_minor_version}-fcs-src-b${jdk_build_number}-${jdk_build_date}
distfiles           ${distname}${extract.suffix} \
                    ${ant_distfile}${extract.suffix}:ant

master_sites        http://download.java.net/openjdk/jdk${jdk_major_version}u${jdk_minor_version}/promoted/b${jdk_build_number}/ \
                    apache:ant/binaries:ant

checksums           ${distname}${extract.suffix} sha256  00f8ea561876cbcad174ba3ca7a9ae10b50df46a782ac64c2ac57ac357b50596 \
                    \
                    ${ant_distfile}${extract.suffix} sha256 d49d60bc0468279125e4a0db4d9b6637cab342a4bd736c90c0b71865b26c1479
    

use_configure       no
use_parallel_build  no

depends_run         port:java_select

depends_lib         port:libiconv \
                    port:freetype \
                    port:xorg-libX11 \
                    port:xorg-libXtst \
                    port:dejavu-fonts

# NOTES:
# OpenJDK7 requires gcc/llvm-gcc; java 8 should support clang directly
# Apple's jobjc depends on both Ruby and Haskell. Go figure.
depends_build       port:llvm-gcc42 \
                    port:ghc \
                    port:ruby

# Check if the bootstrap is required
if {[file exists ${prefix}/share/java/openjdk7/bin/java]} {
    # A previous OpenJDK7 release is already installed
    set bootflags   {}
    set bootstrapvm "${prefix}/share/java/openjdk7"
} else {
    # A bootstrap binary is required to build
    depends_build-append port:openjdk_bootstrap
    set bootflags   {}
    set bootstrapvm "${prefix}/share/java/openjdk_bootstrap"
}
if {false} {
    # Unreachable. We can bootstrap using a system-installed
    # Java 1.6 binary, but using our own bootstrap is preferred (and automatic).
    set bootflags   "SA_APPLE_BOOT_JAVA=true ALWAYS_PASS_TEST_GAMMA=true"
    set bootstrapvm [exec /usr/libexec/java_home -v 1.6]
}

worksrcdir          "openjdk"

post-patch {
    # The jobjc build system includes hard-coded references to /usr/bin/ant; Java build tools (such as ant)
    # are no longer shipped with Xcode 5.0+ on Mavericks.
    reinplace "s|/usr/bin/ant|${workpath}/apache-ant-${ant_version}/bin/ant|g" \
        "${worksrcpath}/jdk/make/java/jobjc/Makefile" \
        "${worksrcpath}/jdk/src/macosx/native/jobjc/JObjC.xcodeproj/project.pbxproj"

    # Fix missing executable permissions on the code generator
    file attributes "${worksrcpath}/jdk/src/macosx/native/jobjc/src/core/PrimitiveCoder.hs" -permissions 0755 
}

# Override the overzealous setting of build environmental variables and settings. These
# assume the use of (a well-behaved) autoconf, and cause an assortment of odd build failures when
# used with OpenJDK's build system.
#
# Unfortunately there's no simple knob to turn the argument insertion off, so this will
# probably have to be updated in the future
build.env {}
build.pre_args {}
build.post_args {}

# Determine the OpenJDK architecture name
supported_archs     x86_64
if {${build_arch} == "i386"} {
    set openjdk_build_arch "i586"
} elseif {${build_arch} == "x86_64"} {
    set openjdk_build_arch "${build_arch}"
} else {
    # Unknown architecture
    return -error "Platform unsupported"
}

# LLVM GCC is required by the build, but no longer shipped in Xcode.
# In addition, Mavericks has marked a number of APIs required by JDK 7
# as deprecated, mandating the use of -Wno-deprecated-declarations
build.args \
    CC="${prefix}/bin/llvm-gcc-4.2" \
    CXX="${prefix}/bin/llvm-g++-4.2" \
    EXTRA_CFLAGS="-Wno-deprecated-declarations -I\"${filespath}/clang-compat-headers\"" \
    LANG="C" \
    "${bootflags}" \
    ALT_BOOTDIR="${bootstrapvm}" \
    ALT_COMPILER_PATH="${prefix}" \
    ANT_HOME="${workpath}/apache-ant-${ant_version}" \
    ALT_FREETYPE_HEADERS_PATH="${prefix}/include" \
    ALT_FREETYPE_LIB_PATH="${prefix}/lib" \
    ALT_X11_PATH="${prefix}" \
    ALT_DEVTOOLS_PATH=/usr \
    ALT_CACERTS_FILE=/System/Library/Frameworks/JavaVM.framework/Home/lib/security/cacerts \
    NO_DOCS="true" \
    SKIP_COMPARE_IMAGES="true" \
    SKIP_FASTDEBUG_BUILD="true" \
    SKIP_DEBUG_BUILD="true" \
    ZIP_DEBUGINFO_FILES=0 \
    ENABLE_FULL_DEBUG_SYMBOLS=0 \
    MILESTONE="fcs" \
    JDK_MICRO_VERSION="0_${jport_minor_version}" \
    BUILD_NUMBER="b${jport_build_number}" \
    MILESTONE=fcs \
    BUNDLE_NAME="OpenJDK 1.${jdk_major_version}.0_${jport_minor_version} (MacPorts)" \
    BUNDLE_INFO="OpenJDK MacPorts-${version}" \
    BUNDLE_ID="org.macports.openjdk" \
    BUNDLE_VENDOR="MacPorts" \
    HOTSPOT_BUILD_JOBS="${build.jobs}"

destroot {
    set path "${destroot}${prefix}/share/java/${name}/"
    xinstall -m 755 -d ${path}
    system "(cd ${worksrcpath}/build/macosx-${openjdk_build_arch}/j2sdk-image && tar cf - *) | (tar -C ${path} -xf -)"
}
